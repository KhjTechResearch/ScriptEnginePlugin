// generated from gentext.pl Messages.xlsx
#include "tjs/tjsCommHead.h"

#include "tjs/tjsError.h"
#include "tjs/tjsTypes.h"
#include "string_table_resource.h"
#include "messages.h"
namespace TJS{
static bool IS_LOAD_MESSAGE = false;
static const int MAX_MESSAGE_LENGTH = 1024;
#define NUM_MESSAGE_MAX 73
enum {
	NUM_TJS_INTERNAL_ERROR,
	NUM_TJS_WARNING,
	NUM_TJS_WARN_EVAL_OPERATOR,
	NUM_TJS_NARROW_TO_WIDE_CONVERSION_ERROR,
	NUM_TJS_VARIANT_CONVERT_ERROR,
	NUM_TJS_VARIANT_CONVERT_ERROR_TO_OBJECT,
	NUM_TJS_IDEXPECTED,
	NUM_TJS_SUBSTITUTION_IN_BOOLEAN_CONTEXT,
	NUM_TJS_CANNOT_MODIFY_LHS,
	NUM_TJS_INSUFFICIENT_MEM,
	NUM_TJS_CANNOT_GET_RESULT,
	NUM_TJS_NULL_ACCESS,
	NUM_TJS_MEMBER_NOT_FOUND,
	NUM_TJS_MEMBER_NOT_FOUND_NO_NAME_GIVEN,
	NUM_TJS_NOT_IMPLEMENTED,
	NUM_TJS_INVALID_PARAM,
	NUM_TJS_BAD_PARAM_COUNT,
	NUM_TJS_INVALID_TYPE,
	NUM_TJS_SPECIFY_DIC_OR_ARRAY,
	NUM_TJS_SPECIFY_ARRAY,
	NUM_TJS_STRING_DEALLOC_ERROR,
	NUM_TJS_STRING_ALLOC_ERROR,
	NUM_TJS_MISPLACED_BREAK_CONTINUE,
	NUM_TJS_MISPLACED_CASE,
	NUM_TJS_MISPLACED_RETURN,
	NUM_TJS_STRING_PARSE_ERROR,
	NUM_TJS_NUMBER_ERROR,
	NUM_TJS_UNCLOSED_COMMENT,
	NUM_TJS_INVALID_CHAR,
	NUM_TJS_EXPECTED,
	NUM_TJS_SYNTAX_ERROR,
	NUM_TJS_PPERROR,
	NUM_TJS_CANNOT_GET_SUPER,
	NUM_TJS_INVALID_OPECODE,
	NUM_TJS_RANGE_ERROR,
	NUM_TJS_ACCESS_DENYED,
	NUM_TJS_NATIVE_CLASS_CRASH,
	NUM_TJS_INVALID_OBJECT,
	NUM_TJS_CANNOT_OMIT,
	NUM_TJS_CANNOT_PARSE_DATE,
	NUM_TJS_INVALID_VALUE_FOR_TIMESTAMP,
	NUM_TJS_EXCEPTION_NOT_FOUND,
	NUM_TJS_INVALID_FORMAT_STRING,
	NUM_TJS_DIVIDE_BY_ZERO,
	NUM_TJS_NOT_RECONSTRUCTIVE_RANDOMIZE_DATA,
	NUM_TJS_SYMBOL,
	NUM_TJS_CALL_HISTORY_IS_FROM_OUT_OF_TJS2SCRIPT,
	NUM_TJS_NOBJECTS_WAS_NOT_FREED,
	NUM_TJS_OBJECT_CREATION_HISTORY_DELIMITER_CRLF,
	NUM_TJS_OBJECT_CREATION_HISTORY_DELIMITER,
	NUM_TJS_OBJECT_WAS_NOT_FREED_CRLF,
	NUM_TJS_OBJECT_WAS_NOT_FREED,
	NUM_TJS_GROUP_BY_OBJECT_TYPE_AND_HISTORY,
	NUM_TJS_GROUP_BY_OBJECT_TYPE,
	NUM_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY_CRLF,
	NUM_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY,
	NUM_TJS_OBJECT_COUNTING_MESSAGE_TJSGROUP_BY_OBJECT_TYPE,
	NUM_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT_CRLF,
	NUM_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT,
	NUM_TJS_WRITE_ERROR,
	NUM_TJS_READ_ERROR,
	NUM_TJS_SEEK_ERROR,
	NUM_TJS_BYTE_CODE_BROKEN,
	NUM_TJS_OBJECT_HASH_MAP_LOG_VERSION_MISMATCH,
	NUM_TJS_CURRUPTED_OBJECT_HASH_MAP_LOG,
	NUM_TJS_UNKNOWN_FAILURE,
	NUM_TJS_UNKNOWN_PACK_UNPACK_TEMPLATE_CHARCTER,
	NUM_TJS_UNKNOWN_BIT_STRING_CHARACTER,
	NUM_TJS_UNKNOWN_HEX_STRING_CHARACTER,
	NUM_TJS_NOT_SUPPORTED_UUENCODE,
	NUM_TJS_NOT_SUPPORTED_BER,
	NUM_TJS_NOT_SUPPORTED_UNPACK_LP,
	NUM_TJS_NOT_SUPPORTED_UNPACK_P,
};
const tjs_char* RESOURCE_MESSAGE[NUM_MESSAGE_MAX];
const int RESOURCE_IDS[] = {
	IDS_TJS_INTERNAL_ERROR,
	IDS_TJS_WARNING,
	IDS_TJS_WARN_EVAL_OPERATOR,
	IDS_TJS_NARROW_TO_WIDE_CONVERSION_ERROR,
	IDS_TJS_VARIANT_CONVERT_ERROR,
	IDS_TJS_VARIANT_CONVERT_ERROR_TO_OBJECT,
	IDS_TJS_IDEXPECTED,
	IDS_TJS_SUBSTITUTION_IN_BOOLEAN_CONTEXT,
	IDS_TJS_CANNOT_MODIFY_LHS,
	IDS_TJS_INSUFFICIENT_MEM,
	IDS_TJS_CANNOT_GET_RESULT,
	IDS_TJS_NULL_ACCESS,
	IDS_TJS_MEMBER_NOT_FOUND,
	IDS_TJS_MEMBER_NOT_FOUND_NO_NAME_GIVEN,
	IDS_TJS_NOT_IMPLEMENTED,
	IDS_TJS_INVALID_PARAM,
	IDS_TJS_BAD_PARAM_COUNT,
	IDS_TJS_INVALID_TYPE,
	IDS_TJS_SPECIFY_DIC_OR_ARRAY,
	IDS_TJS_SPECIFY_ARRAY,
	IDS_TJS_STRING_DEALLOC_ERROR,
	IDS_TJS_STRING_ALLOC_ERROR,
	IDS_TJS_MISPLACED_BREAK_CONTINUE,
	IDS_TJS_MISPLACED_CASE,
	IDS_TJS_MISPLACED_RETURN,
	IDS_TJS_STRING_PARSE_ERROR,
	IDS_TJS_NUMBER_ERROR,
	IDS_TJS_UNCLOSED_COMMENT,
	IDS_TJS_INVALID_CHAR,
	IDS_TJS_EXPECTED,
	IDS_TJS_SYNTAX_ERROR,
	IDS_TJS_PPERROR,
	IDS_TJS_CANNOT_GET_SUPER,
	IDS_TJS_INVALID_OPECODE,
	IDS_TJS_RANGE_ERROR,
	IDS_TJS_ACCESS_DENYED,
	IDS_TJS_NATIVE_CLASS_CRASH,
	IDS_TJS_INVALID_OBJECT,
	IDS_TJS_CANNOT_OMIT,
	IDS_TJS_CANNOT_PARSE_DATE,
	IDS_TJS_INVALID_VALUE_FOR_TIMESTAMP,
	IDS_TJS_EXCEPTION_NOT_FOUND,
	IDS_TJS_INVALID_FORMAT_STRING,
	IDS_TJS_DIVIDE_BY_ZERO,
	IDS_TJS_NOT_RECONSTRUCTIVE_RANDOMIZE_DATA,
	IDS_TJS_SYMBOL,
	IDS_TJS_CALL_HISTORY_IS_FROM_OUT_OF_TJS2SCRIPT,
	IDS_TJS_NOBJECTS_WAS_NOT_FREED,
	IDS_TJS_OBJECT_CREATION_HISTORY_DELIMITER_CRLF,
	IDS_TJS_OBJECT_CREATION_HISTORY_DELIMITER,
	IDS_TJS_OBJECT_WAS_NOT_FREED_CRLF,
	IDS_TJS_OBJECT_WAS_NOT_FREED,
	IDS_TJS_GROUP_BY_OBJECT_TYPE_AND_HISTORY,
	IDS_TJS_GROUP_BY_OBJECT_TYPE,
	IDS_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY_CRLF,
	IDS_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY,
	IDS_TJS_OBJECT_COUNTING_MESSAGE_TJSGROUP_BY_OBJECT_TYPE,
	IDS_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT_CRLF,
	IDS_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT,
	IDS_TJS_WRITE_ERROR,
	IDS_TJS_READ_ERROR,
	IDS_TJS_SEEK_ERROR,
	IDS_TJS_BYTE_CODE_BROKEN,
	IDS_TJS_OBJECT_HASH_MAP_LOG_VERSION_MISMATCH,
	IDS_TJS_CURRUPTED_OBJECT_HASH_MAP_LOG,
	IDS_TJS_UNKNOWN_FAILURE,
	IDS_TJS_UNKNOWN_PACK_UNPACK_TEMPLATE_CHARCTER,
	IDS_TJS_UNKNOWN_BIT_STRING_CHARACTER,
	IDS_TJS_UNKNOWN_HEX_STRING_CHARACTER,
	IDS_TJS_NOT_SUPPORTED_UUENCODE,
	IDS_TJS_NOT_SUPPORTED_BER,
	IDS_TJS_NOT_SUPPORTED_UNPACK_LP,
	IDS_TJS_NOT_SUPPORTED_UNPACK_P,
};
void TVPLoadMessage() {
	if (IS_LOAD_MESSAGE) return;
	IS_LOAD_MESSAGE = true;
	tjs_char buffer[MAX_MESSAGE_LENGTH];
	HINSTANCE hInstance = ::GetModuleHandle(0);
	for (int i = 0; i < NUM_MESSAGE_MAX; i++) {
		int len = ::LoadString(hInstance, RESOURCE_IDS[i], buffer, MAX_MESSAGE_LENGTH);
		if (len <= 0) {
			buffer[0] = { 0 };
		}
		tjs_char* work = new tjs_char[len + 1];
		wcscpy_s(work, len + 1, buffer);
		RESOURCE_MESSAGE[i] = work;
	}
	TJSInternalError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_INTERNAL_ERROR]);
	TJSWarning.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_WARNING]);
	TJSWarnEvalOperator.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_WARN_EVAL_OPERATOR]);
	TJSNarrowToWideConversionError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NARROW_TO_WIDE_CONVERSION_ERROR]);
	TJSVariantConvertError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_VARIANT_CONVERT_ERROR]);
	TJSVariantConvertErrorToObject.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_VARIANT_CONVERT_ERROR_TO_OBJECT]);
	TJSIDExpected.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_IDEXPECTED]);
	TJSSubstitutionInBooleanContext.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_SUBSTITUTION_IN_BOOLEAN_CONTEXT]);
	TJSCannotModifyLHS.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_CANNOT_MODIFY_LHS]);
	TJSInsufficientMem.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_INSUFFICIENT_MEM]);
	TJSCannotGetResult.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_CANNOT_GET_RESULT]);
	TJSNullAccess.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NULL_ACCESS]);
	TJSMemberNotFound.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_MEMBER_NOT_FOUND]);
	TJSMemberNotFoundNoNameGiven.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_MEMBER_NOT_FOUND_NO_NAME_GIVEN]);
	TJSNotImplemented.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NOT_IMPLEMENTED]);
	TJSInvalidParam.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_INVALID_PARAM]);
	TJSBadParamCount.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_BAD_PARAM_COUNT]);
	TJSInvalidType.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_INVALID_TYPE]);
	TJSSpecifyDicOrArray.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_SPECIFY_DIC_OR_ARRAY]);
	TJSSpecifyArray.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_SPECIFY_ARRAY]);
	TJSStringDeallocError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_STRING_DEALLOC_ERROR]);
	TJSStringAllocError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_STRING_ALLOC_ERROR]);
	TJSMisplacedBreakContinue.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_MISPLACED_BREAK_CONTINUE]);
	TJSMisplacedCase.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_MISPLACED_CASE]);
	TJSMisplacedReturn.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_MISPLACED_RETURN]);
	TJSStringParseError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_STRING_PARSE_ERROR]);
	TJSNumberError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NUMBER_ERROR]);
	TJSUnclosedComment.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_UNCLOSED_COMMENT]);
	TJSInvalidChar.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_INVALID_CHAR]);
	TJSExpected.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_EXPECTED]);
	TJSSyntaxError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_SYNTAX_ERROR]);
	TJSPPError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_PPERROR]);
	TJSCannotGetSuper.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_CANNOT_GET_SUPER]);
	TJSInvalidOpecode.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_INVALID_OPECODE]);
	TJSRangeError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_RANGE_ERROR]);
	TJSAccessDenyed.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_ACCESS_DENYED]);
	TJSNativeClassCrash.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NATIVE_CLASS_CRASH]);
	TJSInvalidObject.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_INVALID_OBJECT]);
	TJSCannotOmit.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_CANNOT_OMIT]);
	TJSCannotParseDate.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_CANNOT_PARSE_DATE]);
	TJSInvalidValueForTimestamp.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_INVALID_VALUE_FOR_TIMESTAMP]);
	TJSExceptionNotFound.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_EXCEPTION_NOT_FOUND]);
	TJSInvalidFormatString.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_INVALID_FORMAT_STRING]);
	TJSDivideByZero.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_DIVIDE_BY_ZERO]);
	TJSNotReconstructiveRandomizeData.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NOT_RECONSTRUCTIVE_RANDOMIZE_DATA]);
	TJSSymbol.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_SYMBOL]);
	TJSCallHistoryIsFromOutOfTJS2Script.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_CALL_HISTORY_IS_FROM_OUT_OF_TJS2SCRIPT]);
	TJSNObjectsWasNotFreed.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NOBJECTS_WAS_NOT_FREED]);
#ifdef TJS_TEXT_OUT_CRLF
	TJSObjectCreationHistoryDelimiter.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_OBJECT_CREATION_HISTORY_DELIMITER_CRLF]);
#else
	TJSObjectCreationHistoryDelimiter.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_OBJECT_CREATION_HISTORY_DELIMITER]);
#endif
#ifdef TJS_TEXT_OUT_CRLF
	TJSObjectWasNotFreed.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_OBJECT_WAS_NOT_FREED_CRLF]);
#else
	TJSObjectWasNotFreed.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_OBJECT_WAS_NOT_FREED]);
#endif
	TJSGroupByObjectTypeAndHistory.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_GROUP_BY_OBJECT_TYPE_AND_HISTORY]);
	TJSGroupByObjectType.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_GROUP_BY_OBJECT_TYPE]);
#ifdef TJS_TEXT_OUT_CRLF
	TJSObjectCountingMessageGroupByObjectTypeAndHistory.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY_CRLF]);
#else
	TJSObjectCountingMessageGroupByObjectTypeAndHistory.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_OBJECT_COUNTING_MESSAGE_GROUP_BY_OBJECT_TYPE_AND_HISTORY]);
#endif
	TJSObjectCountingMessageTJSGroupByObjectType.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_OBJECT_COUNTING_MESSAGE_TJSGROUP_BY_OBJECT_TYPE]);
#ifdef TJS_TEXT_OUT_CRLF
	TJSWarnRunningCodeOnDeletingObject.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT_CRLF]);
#else
	TJSWarnRunningCodeOnDeletingObject.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_WARN_RUNNING_CODE_ON_DELETING_OBJECT]);
#endif
	TJSWriteError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_WRITE_ERROR]);
	TJSReadError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_READ_ERROR]);
	TJSSeekError.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_SEEK_ERROR]);
	TJSByteCodeBroken.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_BYTE_CODE_BROKEN]);
	TJSObjectHashMapLogVersionMismatch.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_OBJECT_HASH_MAP_LOG_VERSION_MISMATCH]);
	TJSCurruptedObjectHashMapLog.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_CURRUPTED_OBJECT_HASH_MAP_LOG]);
	TJSUnknownFailure.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_UNKNOWN_FAILURE]);
	TJSUnknownPackUnpackTemplateCharcter.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_UNKNOWN_PACK_UNPACK_TEMPLATE_CHARCTER]);
	TJSUnknownBitStringCharacter.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_UNKNOWN_BIT_STRING_CHARACTER]);
	TJSUnknownHexStringCharacter.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_UNKNOWN_HEX_STRING_CHARACTER]);
	TJSNotSupportedUuencode.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NOT_SUPPORTED_UUENCODE]);
	TJSNotSupportedBER.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NOT_SUPPORTED_BER]);
	TJSNotSupportedUnpackLP.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NOT_SUPPORTED_UNPACK_LP]);
	TJSNotSupportedUnpackP.AssignMessage(RESOURCE_MESSAGE[NUM_TJS_NOT_SUPPORTED_UNPACK_P]);
}
const tjs_char* TVPGetMessage(tjs_int id) {
	if (id >= 0 && id < NUM_MESSAGE_MAX) {
		return RESOURCE_MESSAGE[id];
	}
	else {
		return NULL;
	}
}
void TVPFreeMessages() {
	for (int i = 0; i < NUM_MESSAGE_MAX; i++) {
		delete[] RESOURCE_MESSAGE[i];
	}
}
}